from scipy.optimize import minimize
import numpy as np

# We use g and b to denote the states and 0 and 1 to denote the actions
# x[0] is pg0, x[1] is pg1, x[2] is pb0 and x[3] is pb1

# pg = pg0 + pg1 and pb = pb0 + pb1

pg = 0.6
pb = 0.4

# We use ug0 to denote the utility of taking action 0 when the state is g

ug0 = 1
ug1 = 2
ub0 = -1
ub1 = -2

# Be careful of the utility of the information designer, this can change
fun = lambda x : - x[1] - x[3]


# All the inequality constraints are >=

cons = ({'type': 'eq', 'fun': lambda x: x[0] + x[1] - pg},
        {'type': 'eq', 'fun': lambda x: x[2] + x[3] - pb},
        {'type': 'ineq', 'fun': lambda x: x[0] * ug0 + x[2] * ub0 - x[0] * ug1 - x[2] * ub1},
        {'type': 'ineq', 'fun': lambda x: x[1] * ug1 + x[3] * ub1 - x[1] * ug0 - x[3] * ub0},
        {'type': 'ineq', 'fun': lambda x: x[0]},
        {'type': 'ineq', 'fun': lambda x: x[1]},
        {'type': 'ineq', 'fun': lambda x: x[2]},
        {'type': 'ineq', 'fun': lambda x: x[3]},
        {'type': 'ineq', 'fun': lambda x: 1 - x[0]},
        {'type': 'ineq', 'fun': lambda x: 1 - x[1]},
        {'type': 'ineq', 'fun': lambda x: 1 - x[2]},
        {'type': 'ineq', 'fun': lambda x: 1 - x[3]}
       )

# We use 0 as initial guess

x0 = np.array((0,0,0,0))

res = minimize(fun, x0, method='SLSQP', constraints=cons)

print("The maximum utility of the information designer in this problem is",res.fun)
print("With pg0 =",res.x[0])
print("With pg1 =",res.x[1])
print("With pb0 =",res.x[2])
print("With pb1 =",res.x[3])
